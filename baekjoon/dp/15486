#include <iostream>
#include <vector>
#include <algorithm>
#define TIME first
#define PRICE second

using namespace std;

int N;
vector<pair<int, int>> list;
vector<int> dp;

// dp[curr_day] = curr_day부터 N일까지 상담을 진행했을 때 받을 수 있는 최대 금액을 메모이제이션
// dp[curr_day] = max(dp[curr_day + 1], dp[curr_day + list[curr_day].TIME] + curr_day.PRICE))
int make_dp(int curr_day) {
    if (curr_day == N)
        return 0;
    int &ret = dp[curr_day];
    if (ret != -1)
        return ret;
    ret = make_dp(curr_day + 1);
    if (curr_day + list[curr_day].TIME <= N)
        ret = max(ret, make_dp(curr_day + list[curr_day].TIME) + list[curr_day].PRICE);
    return ret;
}

int main(void) {
    ios::sync_with_stdio(false);
    cin.tie(NULL);
    cin >> N;
    for (int i = 0; i < N; i++) {
        int time, price;
        cin >> time >> price;
        list.push_back({time, price});
    }
    dp = vector<int>(N, -1);
    cout << make_dp(0) << endl;
    return 0;
}
